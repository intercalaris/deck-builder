<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Deck</title>
    <link rel="stylesheet" href="/css/output.css">
</head>
<body class="bg-gray-100 min-h-screen">
    <nav class="bg-white shadow-lg mb-8">
        <div class="max-w-6xl mx-auto px-4">
            <div class="flex justify-between items-center h-16">
                <a href="/" class="text-xl font-bold">Pokémon TCG Deck Builder</a>
                <div class="flex items-center space-x-4">
                    <form action="/logout" method="POST" class="inline">
                        <button type="submit" class="text-gray-700" id="close-session">Logout</button>
                    </form>
                </div>
            </div>
        </div>
    </nav>

    <div class="max-w-2xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        <div class="bg-white rounded-lg shadow-lg p-6">
            <h1 class="text-3xl font-bold text-gray-900 mb-8">Edit Deck</h1>

            <form id="deckForm" class="space-y-8">
                <div>
                    <label for="deckName" class="block text-sm font-medium text-gray-700">Deck Name</label>
                    <input 
                        type="text" 
                        id="deckName" 
                        name="name" 
                        required 
                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm p-2 border"
                        placeholder="Enter deck name"
                        value="<%= deck.name %>"
                    >
                </div>

                <div>
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-semibold text-gray-900">Cards</h2>
                        <button 
                            type="button" 
                            onclick="addCardField()" 
                            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                        >
                            Add Card
                        </button>
                    </div>
                    
                    <div id="cardList" class="space-y-4">
                        <% deck.cards.forEach(function(card, index) { %>
                            <div class="flex gap-4 items-start bg-gray-50 p-4 rounded-lg">
                                <div class="flex-1">
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Card Name</label>
                                    <input 
                                        type="text" 
                                        name="cards[<%= index %>][name]" 
                                        value="<%= card.name %>"
                                        required 
                                        class="block w-full rounded-md border-gray-300 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm p-2 border"
                                    >
                                </div>
                                <div class="flex-1">
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Card Type</label>
                                    <select 
                                        name="cards[<%= index %>][type]" 
                                        required 
                                        class="block w-full rounded-md border-gray-300 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm p-2 border bg-white"
                                    >
                                        <option value="">Select Type</option>
                                        <option value="grass" <%= card.type === 'grass' ? 'selected' : '' %>>Grass</option>
                                        <option value="fire" <%= card.type === 'fire' ? 'selected' : '' %>>Fire</option>
                                        <option value="electric" <%= card.type === 'electric' ? 'selected' : '' %>>Electric</option>
                                        <option value="water" <%= card.type === 'water' ? 'selected' : '' %>>Water</option>
                                        <option value="psychic" <%= card.type === 'psychic' ? 'selected' : '' %>>Psychic</option>
                                        <option value="fighter" <%= card.type === 'fighter' ? 'selected' : '' %>>Fighter</option>
                                        <option value="dark" <%= card.type === 'dark' ? 'selected' : '' %>>Dark</option>
                                        <option value="steel" <%= card.type === 'steel' ? 'selected' : '' %>>Steel</option>
                                        <option value="dragon" <%= card.type === 'dragon' ? 'selected' : '' %>>Dragon</option>
                                        <option value="normal" <%= card.type === 'normal' ? 'selected' : '' %>>Normal</option>
                                        <option value="trainer" <%= card.type === 'trainer' ? 'selected' : '' %>>Trainer</option>
                                    </select>
                                </div>
                                <button 
                                    type="button" 
                                    onclick="this.parentElement.remove()" 
                                    class="inline-flex items-center px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-red-600 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 mt-6"
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        <% }); %>
                    </div>
                </div>

                <div class="pt-4">
                    <button 
                        type="submit" 
                        class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200"
                    >
                        Update Deck
                    </button>
                </div>
            </form>
        </div>
    </div>

    <footer class="bg-white mt-8 py-4">
        <div class="max-w-6xl mx-auto px-4 text-center text-gray-600">
            &copy; Yonatan Aviv 2024 Pokémon TCG Deck Builder
        </div>
    </footer>

    <script>
        // Initialize card counter
        let cardCount = <%= deck.cards.length %>;

        // Function to add new card field
        function addCardField() {
            const cardList = document.getElementById('cardList');
            const newCard = `
                <div class="flex gap-4 items-start bg-gray-50 p-4 rounded-lg">
                    <div class="flex-1">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Card Name</label>
                        <input 
                            type="text" 
                            name="cards[${cardCount}][name]" 
                            placeholder="Enter card name" 
                            required 
                            class="block w-full rounded-md border-gray-300 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm p-2 border"
                        >
                    </div>
                    <div class="flex-1">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Card Type</label>
                        <select 
                            name="cards[${cardCount}][type]" 
                            required 
                            class="block w-full rounded-md border-gray-300 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm p-2 border bg-white"
                        >
                            <option value="">Select Type</option>
                            <option value="grass">Grass</option>
                            <option value="fire">Fire</option>
                            <option value="electric">Electric</option>
                            <option value="water">Water</option>
                            <option value="psychic">Psychic</option>
                            <option value="fighter">Fighter</option>
                            <option value="dark">Dark</option>
                            <option value="steel">Steel</option>
                            <option value="dragon">Dragon</option>
                            <option value="normal">Normal</option>
                            <option value="trainer">Trainer</option>
                        </select>
                    </div>
                    <button 
                        type="button" 
                        onclick="this.parentElement.remove()" 
                        class="inline-flex items-center px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-red-600 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 mt-6"
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            `;
            
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = newCard;
            cardList.appendChild(tempDiv.firstElementChild);
            cardCount++;
        }

        // Handle logout
        const logoutButton = document.getElementById('close-session');
        logoutButton?.addEventListener('click', async (e) => {
            e.preventDefault();
            try {
                await fetch('/logout', { method: 'POST' });
                window.location.href = '/';
            } catch (error) {
                console.error('Logout failed:', error);
            }
        });

        // Handle form submission
        document.getElementById('deckForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            
            // Collect form data
            const deckData = {
                name: formData.get('name'),
                cards: []
            };

            // Process card data
            for (let i = 0; i < cardCount; i++) {
                const cardName = formData.get(`cards[${i}][name]`);
                const cardType = formData.get(`cards[${i}][type]`);
                
                if (cardName && cardType) {
                    deckData.cards.push({ name: cardName, type: cardType });
                }
            }

            try {
                // Send update request
                await fetch('/decks/<%= deck._id %>', {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(deckData)
                });
                
                // Redirect after successful update
                setTimeout(() => {
                    window.location.href = '/decks';
                }, 2000);
            } catch (error) {
                // Show error message
                showError('Error updating deck');
            }
        });

        // Helper function to show error messages
        function showError(message) {
            const alertDiv = document.createElement('div');
            alertDiv.className = 'bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mt-4';
            alertDiv.role = 'alert';
            alertDiv.innerHTML = `
                <strong class="font-bold">Error!</strong>
                <span class="block sm:inline">${message}</span>
            `;
            
            const form = document.getElementById('deckForm');
            form.insertBefore(alertDiv, form.querySelector('button[type="submit"]'));
            
            setTimeout(() => alertDiv.remove(), 5000);
        }
    </script>
</body>
</html>